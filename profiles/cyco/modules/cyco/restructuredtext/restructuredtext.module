<?php

/**
 * Implements hook_menu().
 */
//function restructuredtext_menu() {
//  $items = array();
//  // Administrative settings.
//  $items['admin/config/content/restructuredtext'] = array(
//    'title' => 'reStructuredText',
//    'description' => 'reStructuredText settings.',
//    'file' => 'restructuredtext.admin.inc',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('_restructuredtext_admin_settings'),
//    'access arguments' => array('administer site configuration'),
//  );
//  return $items;
//}





/**
 * Implements hook_help().
 * @todo Write ReSTy help in hook_help.
 */
function restructuredtext_help($path, $arg) {
  switch ($path) {
    case 'admin/help#restructuredtext':
      return t('Helpy helpy help help, <a href="@docutils">Docutils</a>.', 
          array(
            '@docutils' => 'http://docutils.sourceforge.net/',
      ));
  }
}

/**
* Implements hook_filter_info().
*/
function restructuredtext_filter_info() {
  $filters = array();
  $filters['rest'] = array(
    'title' => t('reStructuredText'),
    'description' => t(
        'Standard markup language. http://docutils.sourceforge.net/rst.html'
        . ' has the official documentation.'
    ),
    'settings callback' => '_restructuredtext_settings',
//    'prepare callback' => '_dgd7_tip_prepare',
    'process callback' => '_restructuredtext_process',
    'tips callback' => '_restructuredtext_tips',
  );
  return $filters;
} 

/**
 * Tips callback for the ReST filter.
 * @todo Add some tips. Let's get tipsy!
 */
function _restructuredtext_filter_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('Long reStructuredText tips.');
  }
  else {
    return t('Short reStructuredText tips.');
  }
}

function _restructuredtext_settings($form, $form_state, $filter, $format, $defaults) {
  $settings['restructuredtext_docutils_css_path'] = array(
    '#type' => 'textfield',
    '#title' => t('DocUtils CSS path'),
    '#description' => t(
        'The path to the CSS files html4css1.css and math.css, supplied '
        . 'by docutils. E.g., /usr/lib/python27/Lib/site-packages/'
        . 'docutils/writers/html4css1. If not specified (the most common '
        . 'case), files from docutils version 0.11 will be used.'
     ),
    '#default_value' => variable_get('restructuredtext_docutils_css_path', ''),
    '#required' => FALSE,
  );
  return $settings;
}


function _restructuredtext_process($rest, $filter, $format) {
  //Convert from ReST to HTML
  $output = restructuredtext_to_html( $rest );
  return $output;
}




//function swim_process_tokens( $obj_type, $object, $field, $content ) {
//  if ( $obj_type == 'node' ) {
//    //Is this a content type supporting tokens?
//    $content_type = $object->type;
//    $types_supporting_tokens = cybercourse_base_get_types_supporting_tokens();
//    if ( in_array( $content_type, $types_supporting_tokens ) ) {
//      //Is this a field that supports tokens?
//      $field_name = $field['field_name'];
//      $fields_supporting_tokens 
//          = cybercourse_base_get_fields_supporting_tokens($content_type);
//      if (in_array($field_name, $fields_supporting_tokens) ) {
//        //Is the page owned by a user allowed to substitute tokens?
//        $page_owner_uid = $object->uid;
//        $page_owner = user_load($page_owner_uid);
//        if (  cybercourse_base_user_has_role(
//                $page_owner,
//                array( 'author', 'administrator', 'grader', 'instructor')
//              ) 
//           ) {
//          //Replace tokens.
//          $content = token_replace($content);
//        }
//      }
//    }
//  }
//  return $content;
//}



/**
 * Translate pure ReST into HTML.
 * @param string $rest ReST
 * @return string HTML
 */
function restructuredtext_to_html( $rest ) {
  //Run content through ReST translator. Returns mixed ReST and CyCo markup.
  // descriptor array
  $desc = array(
      0 => array('pipe', 'r'), // 0 is STDIN for process
      1 => array('pipe', 'w'), // 1 is STDOUT for process
      2 => array('pipe', 'w') // 2 is STDERR for process
  );
  //Can't remember where this code was adapted from. Some human did it.
  //Command to invoke markup engine. Reads custom config file.
  $py_path = DRUPAL_ROOT . '/' 
      . drupal_get_path('module', 'restructuredtext') .'/python/convert_rest.py';
//  $py_path = DRUPAL_ROOT . '/' 
//      . drupal_get_path('module', 'swim') .'/python/convert_rest.py';
  $command =  'python convert_rest.py'; // . $py_path;
  // spawn the process
  $cwd = DRUPAL_ROOT . '/' . drupal_get_path('module', 'restructuredtext') .'/python/';
  $env = array(
    'PYTHONIOENCODING' => 'utf-8',
    'path' => getenv('path'),
  );
  $p = proc_open($command, $desc, $pipes, $cwd, $env);
  fwrite($pipes[0], $rest);
  fclose($pipes[0]);
  // read the output from the engine
  $html = stream_get_contents($pipes[1]);
  $error_message = stream_get_contents($pipes[2]);
  // all done! Clean up
  fclose($pipes[1]);
  fclose($pipes[2]);
  proc_close($p);
  //Show error messages, if any. These are not CyCo errors, but author errors.
  if ( $error_message ) {
    $error_message = _restructuredtext_format_docutils_errors( $error_message );
    drupal_set_message($error_message, 'warning');
  }
  //Remove extra formula markers added by docutils math directive.
  $html = str_ireplace('\begin{equation*}', '', $html);
  $html = str_ireplace('\end{equation*}', '', $html);
  
  //Translate the CyCo directives markup into HTML
  //Trigger other module's translators.
  drupal_alter( 'restructuredtext_to_html', $html );
  return $html;
}

/**
 * Convert content from CKHTML (HTML from CK field) to pure ReST.
 * Anything the user typed must by HTML encoded, e.g., if the user typed
 * <, then &lt; should be in the content.
 * HTML that CK inserted should be as regular tags.
 * @param string $content Content to convert.
 */
//function _swim_ckhtml2rest( $content ) {
//  //Convert to pure ReST.
//  //Replace &nbsp; with real spaces.
//  $content = str_replace('&nbsp;', ' ', $content);
//  //Replace &#39; with real quotes.
//  $content = str_replace('&#39;', '\'', $content);
//  //Change markup form Mathjax CK plugin to ReST.
//  $content = _swim_ck_mathjx_2_rest( $content );
//  //Remove the <br>s, leaving just the \ns.
//  _swim_remove_brs( $content );
//  
//  //Handle numeric codes correctly.
//  // See http://www.php.net/manual/en/function.html-entity-decode.php#47371
////  $content = preg_replace('/&#(\d+);/me',"chr(\\1)",$content); #decimal notation
////  $content = preg_replace('/&#x([a-f0-9]+);/mei',"chr(0x\\1)",$content);  #hex notation
//  //Trigger other module's translators.
//  drupal_alter( 'swim_ckhtml_2_directive', $content); //, $type );
//  //Replace image HTML tags with directives.
//  //  These must be after other module's hooks are called, so that other 
//  //  modules have processes the images they own.
//  _swim_img_2_path( $content );
//  //Strip all remaining HTML tags.
//  //This gets rid of paste errors. I hope!
//  $content = strip_tags($content);
//  //HTML entities to their real characters.
//  $content = html_entity_decode( $content, ENT_QUOTES, 'UTF-8' );
//  //Special chars - particularly #39; -> '.
//  $content = htmlspecialchars_decode( $content );
//  return $content;
//}

/**
 * Remove <br>s from $content. 
 * @param type $content Content to remove <br>s from.
 */
//function _swim_remove_brs( &$content ) {
//  $content = preg_replace('/\<\s*br\s*\/?\s*\>/i', '', $content);
//}

/**
 * Convert HTML inserted by mathjax CK plugin into ReSt math directive.
 * @param type $content Content from CK.
 */
//function _swim_ck_mathjx_2_rest( $content ) {
//  //Find equations on a line of their own.
//  $pattern = '/\<br\s*\/?\>\s*\<span\s*class\=\"math\"\>(.*?)\<\/span\>\s*\<br\s*\/?\>/im';
//  $content = preg_replace_callback(
//      $pattern, 
//      function ($matches) {
//        //Got one.
//        //Remove blank lines from match. Messes up ReST parser.
//        $result = str_replace("\n", '', $matches[1]);
//        //Output directive, not role.
//        $result = "\n\n.. math::\n\n    " . $result . "\n\n";
//        return $result;
//      },
//      $content
//  );  
//  
//  $pattern = '/\<span\s*class\=\"math\"\>(.*?)\<\/span\>/ims';
//  $content = preg_replace_callback(
//      $pattern, 
//      function ($matches) {
//        //Got one.
//        //Remove blank lines from match. Messes up ReST parser.
//        $result = str_replace("\n", '', $matches[1]);
//        //Remove the first two and last two characters.
//        $result = substr($result, 2);
//        $result = substr($result, 0, strlen($result)-2 );
//        //Output role.
//        $result = ':math:`' . $result . '`';
//        return $result;
//      },
//      $content
//  );
//  return $content;
//}



/**
 * Implements hook_theme.
 */
function restructuredtext_theme() {
  global $base_url;
  $info = array(
    'restructuredtext_format_error' => array(
      'variables' => array(
        'message' => NULL,
      ),
    ),
  );
  return $info;
}

/**
 * Change error messages from Python's docutils into something that
 * will look OK for a drupal_set_message(). Sample input:
 * <string>:5: (ERROR/3) Error in "image" directive:
 * 1 argument(s) required, 0 supplied.
 * 
 * .. image::
 * 
 * @param string $docutils_error_messages Error messages returned from Python.
 * @return string Messages formatted for drupal_set_message().
 */
function _restructuredtext_format_docutils_errors( $docutils_error_messages ) {
  $drupal_message = str_replace('<string>', '', $docutils_error_messages);
  $drupal_message = preg_replace('/\:[0-9]+\:\ /m', '', $drupal_message);
  // :, then 1 or more digits, then :, then space.
  $drupal_message = str_replace("\n", '<br>', $drupal_message);
  $themed_message = theme(
      'restructuredtext_format_error', 
      array(
        'message' => $drupal_message,
      )
  );
  return $themed_message;
}


function theme_restructuredtext_format_error( $variables ) {
  $message = $variables['message'];
  $html = "Problems in translating your ReST.<br><br>" . $message
        . "<br>ReST can be tricky. Check the CyberCourse wiki for help.";
  return $html;
}